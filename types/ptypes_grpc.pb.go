// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: types/ptypes.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailSerivceClient is the client API for EmailSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailSerivceClient interface {
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*None, error)
}

type emailSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailSerivceClient(cc grpc.ClientConnInterface) EmailSerivceClient {
	return &emailSerivceClient{cc}
}

func (c *emailSerivceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := c.cc.Invoke(ctx, "/EmailSerivce/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailSerivceServer is the server API for EmailSerivce service.
// All implementations must embed UnimplementedEmailSerivceServer
// for forward compatibility
type EmailSerivceServer interface {
	SendEmail(context.Context, *SendEmailRequest) (*None, error)
	mustEmbedUnimplementedEmailSerivceServer()
}

// UnimplementedEmailSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailSerivceServer struct {
}

func (UnimplementedEmailSerivceServer) SendEmail(context.Context, *SendEmailRequest) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailSerivceServer) mustEmbedUnimplementedEmailSerivceServer() {}

// UnsafeEmailSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailSerivceServer will
// result in compilation errors.
type UnsafeEmailSerivceServer interface {
	mustEmbedUnimplementedEmailSerivceServer()
}

func RegisterEmailSerivceServer(s grpc.ServiceRegistrar, srv EmailSerivceServer) {
	s.RegisterService(&EmailSerivce_ServiceDesc, srv)
}

func _EmailSerivce_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSerivceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmailSerivce/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSerivceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailSerivce_ServiceDesc is the grpc.ServiceDesc for EmailSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmailSerivce",
	HandlerType: (*EmailSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _EmailSerivce_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/ptypes.proto",
}
